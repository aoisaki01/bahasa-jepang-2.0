{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Carlos/Desktop/language/bahasa-jepang-2.0/app/api/words/%5Blevel%5D/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\n\r\n// Tipe data untuk output yang kita inginkan\r\ninterface Word {\r\n  word: string;\r\n  reading: string;\r\n  meaning: string;\r\n}\r\n\r\nconst JishoAPI = \"https://jisho.org/api/v1/search/words\";\r\n\r\nexport async function GET(\r\n  request: Request,\r\n  { params }: { params: { level: string } }\r\n) {\r\n  const { searchParams } = new URL(request.url);\r\n  const page = searchParams.get('page') || '1'; // Ambil nomor halaman\r\n  const level = params.level.toLowerCase(); // n5, n4, dst.\r\n\r\n  if (!['n5', 'n4', 'n3', 'n2', 'n1'].includes(level)) {\r\n    return NextResponse.json({ error: 'Level tidak valid.' }, { status: 400 });\r\n  }\r\n\r\n  try {\r\n    const keyword = encodeURIComponent(`#jlpt-${level}`);\r\n    const apiUrl = `${JishoAPI}?keyword=${keyword}&page=${page}`;\r\n    \r\n    const response = await fetch(apiUrl);\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Jisho API returned status: ${response.status}`);\r\n    }\r\n\r\n    const { data } = await response.json();\r\n\r\n    if (!Array.isArray(data)) {\r\n      throw new Error(\"Format data dari Jisho API tidak terduga.\");\r\n    }\r\n\r\n    // Ubah format data dari Jisho ke format sederhana yang kita inginkan\r\n    const formattedData: Word[] = data.map((item: any) => ({\r\n      word: item.japanese[0]?.word || item.japanese[0]?.reading,\r\n      reading: item.japanese[0]?.reading,\r\n      // Ambil definisi bahasa Inggris pertama sebagai arti\r\n      meaning: item.senses[0]?.english_definitions[0] || 'Tidak ada arti'\r\n    }));\r\n    \r\n    return NextResponse.json(formattedData);\r\n\r\n  } catch (error) {\r\n    const message = error instanceof Error ? error.message : \"Terjadi kesalahan tidak diketahui\";\r\n    return NextResponse.json({ error: message }, { status: 500 });\r\n  }\r\n}"],"names":[],"mappings":";;;AAAA;;AASA,MAAM,WAAW;AAEV,eAAe,IACpB,OAAgB,EAChB,EAAE,MAAM,EAAiC;IAEzC,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;IAC5C,MAAM,OAAO,aAAa,GAAG,CAAC,WAAW,KAAK,sBAAsB;IACpE,MAAM,QAAQ,OAAO,KAAK,CAAC,WAAW,IAAI,eAAe;IAEzD,IAAI,CAAC;QAAC;QAAM;QAAM;QAAM;QAAM;KAAK,CAAC,QAAQ,CAAC,QAAQ;QACnD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAqB,GAAG;YAAE,QAAQ;QAAI;IAC1E;IAEA,IAAI;QACF,MAAM,UAAU,mBAAmB,CAAC,MAAM,EAAE,OAAO;QACnD,MAAM,SAAS,GAAG,SAAS,SAAS,EAAE,QAAQ,MAAM,EAAE,MAAM;QAE5D,MAAM,WAAW,MAAM,MAAM;QAE7B,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,IAAI,MAAM,CAAC,2BAA2B,EAAE,SAAS,MAAM,EAAE;QACjE;QAEA,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,SAAS,IAAI;QAEpC,IAAI,CAAC,MAAM,OAAO,CAAC,OAAO;YACxB,MAAM,IAAI,MAAM;QAClB;QAEA,qEAAqE;QACrE,MAAM,gBAAwB,KAAK,GAAG,CAAC,CAAC,OAAc,CAAC;gBACrD,MAAM,KAAK,QAAQ,CAAC,EAAE,EAAE,QAAQ,KAAK,QAAQ,CAAC,EAAE,EAAE;gBAClD,SAAS,KAAK,QAAQ,CAAC,EAAE,EAAE;gBAC3B,qDAAqD;gBACrD,SAAS,KAAK,MAAM,CAAC,EAAE,EAAE,mBAAmB,CAAC,EAAE,IAAI;YACrD,CAAC;QAED,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAE3B,EAAE,OAAO,OAAO;QACd,MAAM,UAAU,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QACzD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAQ,GAAG;YAAE,QAAQ;QAAI;IAC7D;AACF","debugId":null}}]
}