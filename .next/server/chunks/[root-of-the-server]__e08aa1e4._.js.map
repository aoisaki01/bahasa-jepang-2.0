{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Carlos/Desktop/language/bahasa-jepang-2.0/app/api/dictionary/translate-word/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport { GoogleGenerativeAI } from '@google/generative-ai';\r\n\r\n// Inisialisasi Gemini dengan API Key dari environment variable\r\nconst genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || '');\r\n\r\nexport async function POST(request: Request) {\r\n  try {\r\n    const { text } = await request.json();\r\n\r\n    if (!text) {\r\n      return NextResponse.json({ error: 'Teks diperlukan.' }, { status: 400 });\r\n    }\r\n\r\n    const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\r\n\r\n    // Prompt yang sangat spesifik untuk tugas kamus\r\n    const prompt = `Translate the following single Indonesian word into its most common, single-word English equivalent for a dictionary lookup. Provide only the single English word as the output, nothing else. For example, if the input is \"mobil\", the output should be \"car\". If the input is \"aku\", the output should be \"I\".\r\n\r\nIndonesian Word: \"${text}\"\r\nEnglish Translation:`;\r\n\r\n    const result = await model.generateContent(prompt);\r\n    const response = result.response;\r\n    // Ambil teks dan bersihkan dari spasi atau baris baru yang tidak perlu\r\n    const translatedWord = response.text().trim();\r\n\r\n    if (!translatedWord) {\r\n      throw new Error(\"Gemini tidak dapat menerjemahkan kata tersebut.\");\r\n    }\r\n\r\n    return NextResponse.json({ translation: translatedWord });\r\n\r\n  } catch (error) {\r\n    console.error(\"Gemini Translation Error:\", error);\r\n    return NextResponse.json({ error: 'Gagal menerjemahkan kata menggunakan AI.' }, { status: 500 });\r\n  }\r\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,+DAA+D;AAC/D,MAAM,QAAQ,IAAI,gKAAA,CAAA,qBAAkB,CAAC,QAAQ,GAAG,CAAC,cAAc,IAAI;AAE5D,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,QAAQ,IAAI;QAEnC,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAmB,GAAG;gBAAE,QAAQ;YAAI;QACxE;QAEA,MAAM,QAAQ,MAAM,kBAAkB,CAAC;YAAE,OAAO;QAAmB;QAEnE,gDAAgD;QAChD,MAAM,SAAS,CAAC;;kBAEF,EAAE,KAAK;oBACL,CAAC;QAEjB,MAAM,SAAS,MAAM,MAAM,eAAe,CAAC;QAC3C,MAAM,WAAW,OAAO,QAAQ;QAChC,uEAAuE;QACvE,MAAM,iBAAiB,SAAS,IAAI,GAAG,IAAI;QAE3C,IAAI,CAAC,gBAAgB;YACnB,MAAM,IAAI,MAAM;QAClB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,aAAa;QAAe;IAEzD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA2C,GAAG;YAAE,QAAQ;QAAI;IAChG;AACF","debugId":null}}]
}